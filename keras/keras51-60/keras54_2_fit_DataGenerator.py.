import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.python.keras.layers import Dense,Input, Conv1D,Flatten
from sklearn.model_selection import train_test_split 
from sklearn.metrics import r2_score, mean_squared_error 

#1. 데이터 

traindatagen=ImageDataGenerator(
    rescale=1./255, 
    horizontal_flip=True, 
    vertical_flip=True ,
    width_shift_range=0.1,
    height_shift_range=0.1, 
    rotation_range=5, 
    zoom_range=1.2, 
    shear_range= 0.7,
    fill_mode='nearest' 
)
testdatagen=ImageDataGenerator(
    rescale=1./255,
)
xy_train = traindatagen.flow_from_directory(
    'c:/study_data/_data/brain/train/',
    #'d:/study_data/_data/brain/train/',
    target_size= (100,100), 
    batch_size=5,  # 전체 데이터 사용하려면 160 넣으라
    class_mode='binary',
    color_mode='grayscale',
    shuffle=True
) 
xy_test = testdatagen.flow_from_directory(
    'c:/study_data/_data/brain/test/',
    #'d:/study_data/_data/brain/test/',
    target_size= (100,100), 
    batch_size=5,
    class_mode='binary',
    color_mode='grayscale',
    shuffle=True
) 
# 현재 x는 ( 5,200,200,1) 이라는 데이터가 32개 
 
# 2. 모델 구성
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten

model = Sequential()
model.add(Conv2D(32,(2,2),padding='same',input_shape=(100,100,1),activation='relu'))
model.add(Conv2D(128,(3,3),padding='same',activation='relu'))
model.add(Conv2D(64,(3,3),padding='same',activation='relu'))
model.add(Flatten())
model.add(Dense(16,activation='relu'))
model.add(Dense(8,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

#3. 컴파일 훈련 
model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['acc'])
# model.fit(
#    # 통배치 넣으면 가능 xy_train[0][0],xy_train[0][1],
#     epochs=10
# )
hist = model.fit_generator(
    xy_train,epochs=30,
    steps_per_epoch=32, # 에포당 얼마나 뛰냐 ->  배치 사이즈 나눈 만큼 뜀
    # steps_per_epoch = 전체데이터/batch =1 60/5 = 32 
    # 이런 식으로 잡아주면 된다. 
    # 작으면 덜 돌고 
    # 크면 맛탱이간다. 과적합 
    validation_data=xy_test,
    validation_steps=24, #발리데이터 / 배치사이즈 = 120/5 = 24
)
# 둘 중하나 깔기 
loss = hist.history['loss']
val_loss = hist.history['val_loss']
acc = hist.history['acc']
val_acc = hist.history['val_acc']
# 매트릭스에 들어간 값이 들어가 있다.
print('loss : ',loss[-1]) # 최종값 
print('val_loss : ',val_loss[-1]) # 최종값 
print('acc : ',acc[-1]) # 최종값 
print('val_acc : ',val_acc[-1]) # 최종값

# 그림 그리기 plt acc 서브 플롯 subplot()
# 튜닝 0.95 

# 4. 평가 예측

import matplotlib.pyplot as plt
# subplot 생성
fig = plt.figure(figsize=(8, 6))

plt.subplot(2, 2, 1)
plt.plot(loss)
plt.subplot(2, 2, 2)
plt.plot(val_loss)
plt.subplot(2, 2, 3)
plt.plot(acc)
plt.subplot(2, 2, 4)
plt.plot(val_acc)
# 전체 그래프 제목 추가하기
plt.suptitle('Training Result') 
plt.show()
# 31일에 시험 프로그램 사용 
# 7일에 물건 치워야함 
